感知器原理：
    感知器模型
       单层感知器是指只有一层处理单元的感知器（包括输入层则为两层）
       单层感知器一般选取符号函数作为其传递函数。
    感知器初始化
       采用MATLAB神经网络工具箱中的init（）函数
       在使用了newp函数创建一个感知器网络后，在其中的内置函数已经对感知器进行了初始化
     感知器学习规则
        对应输入向量p，输出向量a，目标矢量为t的感知器，该感知器的学习误差为e，则e=t-a，此时感知器的权值和阈值修正公式为：
               Δw（i，j）=[t（i）-a（i）]x p[j]=e(i)xp(j)
               Δb（i）= [t(i)-a(i)]x1=e(i)x1
         更新后的权值和阈值为
               w(i,j)=w(i,j)+Δw(i,j)
               b(i)=b(i)+Δb(i)
               
               学习规则可以用learnp或者learnpn来实现
               
     感知器训练
       感知器的训练函数为：adaptwb和trainwb
       感知器在应用前必须经过训练
      
     感知器的局限性
        感知器的传递函数一般采用阈值函数，输出值只有两种（0和1，-1和1）
        单层感知器网络只能解决线性可分的问题
        感知器学习算法只用于单层感知器网络，一般感知器网络是单层的
     感知器工具箱的函数
     1.感知器的创建函数
         newp创建一个感知器
           net=newp;
           net=newp(pr,s,tf,lf)
         pr是一个rx2的矩阵，由输入向量的最大值和最小值组成，s表示神经元的个数，tf是传递函数，默认是hardlim，lf是学习函数，默认为learnp
     2.显示函数
         1.分界线绘制函数plotpc
             plotpc（w，b）返回绘制分界线的控制权
             plotpc（W,B,H）包含从前一次调用中返回的句柄。在它画新分界线之前，删除旧线
           w是sxr维的加权矩阵，r不大于3；b表示sx1维的阈值向量；h表示最后一次绘制分界线的句柄
         2.输入/目标向量绘制函数plotpv
             plotpv（p,t）以t为标尺，绘制p的列向量
             plotpv(p,t,v)在v的范围内，以t为标尺，绘制p的列向量
           p表示n个或维的样本，是一个2xn维或者3xn维的矩阵
           t表示一个样本点的类别，是一个n维的向量
           v表示设置坐标值范围的一个向量，由输入向量的最大值和最小值组成
         3.性能函数
            mae
                 perf = mae（E,Y,X,FP）;
                 dPerf_dy = mae('dy',E,Y,X,perf,FP)
                 dPerf_dy = mae('dx',E,Y,X,perf,FP)
                 info = mae('code')
              perf表示函数的返回值，E是误差矩阵或向量，Y为阈值向量（可忽略），X为所有权值（可忽略），FP为性能参数（可忽略），
              code的不同，返回值不同，=
                   deriv  返回导数函数的全称
                   name   返回函数全称
                   pnames 返回训练函数的名称
                   pdefaults  返回默认的训练参数
          
